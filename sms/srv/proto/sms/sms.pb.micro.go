// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/sms/sms.proto

package go_micro_srv_sms

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Sms service

type SmsService interface {
	List(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*ListResponse, error)
	Template(ctx context.Context, in *TemplateRequest, opts ...client.CallOption) (*TemplateResponse, error)
	Povider(ctx context.Context, in *PoviderRequest, opts ...client.CallOption) (*PoviderResponse, error)
}

type smsService struct {
	c    client.Client
	name string
}

func NewSmsService(name string, c client.Client) SmsService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.micro.srv.sms"
	}
	return &smsService{
		c:    c,
		name: name,
	}
}

func (c *smsService) List(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*ListResponse, error) {
	req := c.c.NewRequest(c.name, "Sms.List", in)
	out := new(ListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsService) Template(ctx context.Context, in *TemplateRequest, opts ...client.CallOption) (*TemplateResponse, error) {
	req := c.c.NewRequest(c.name, "Sms.Template", in)
	out := new(TemplateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsService) Povider(ctx context.Context, in *PoviderRequest, opts ...client.CallOption) (*PoviderResponse, error) {
	req := c.c.NewRequest(c.name, "Sms.Povider", in)
	out := new(PoviderResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Sms service

type SmsHandler interface {
	List(context.Context, *ListRequest, *ListResponse) error
	Template(context.Context, *TemplateRequest, *TemplateResponse) error
	Povider(context.Context, *PoviderRequest, *PoviderResponse) error
}

func RegisterSmsHandler(s server.Server, hdlr SmsHandler, opts ...server.HandlerOption) error {
	type sms interface {
		List(ctx context.Context, in *ListRequest, out *ListResponse) error
		Template(ctx context.Context, in *TemplateRequest, out *TemplateResponse) error
		Povider(ctx context.Context, in *PoviderRequest, out *PoviderResponse) error
	}
	type Sms struct {
		sms
	}
	h := &smsHandler{hdlr}
	return s.Handle(s.NewHandler(&Sms{h}, opts...))
}

type smsHandler struct {
	SmsHandler
}

func (h *smsHandler) List(ctx context.Context, in *ListRequest, out *ListResponse) error {
	return h.SmsHandler.List(ctx, in, out)
}

func (h *smsHandler) Template(ctx context.Context, in *TemplateRequest, out *TemplateResponse) error {
	return h.SmsHandler.Template(ctx, in, out)
}

func (h *smsHandler) Povider(ctx context.Context, in *PoviderRequest, out *PoviderResponse) error {
	return h.SmsHandler.Povider(ctx, in, out)
}
